{"version":3,"sources":["Components/Table/index.js","Components/EnquiryForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","maxWidth","SimpleTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","data","map","item","index","key","customerID","customerName","gender","customerPhoneNumber","EnquiryForm","state","text","isLoading","handleInputChange","event","updatedObject","target","name","value","setState","handleButtonCLick","a","requestOptions","method","headers","body","JSON","stringify","title","fetch","response","json","console","log","tempList","dataCopy","localStorage","getItem","parse","push","setItem","this","Input","label","type","onChange","Select","MenuItem","color","Button","variant","onClick","CircularProgress","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f932388b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        maxWidth: 650,\r\n    },\r\n});\r\n\r\n// function createData(name, phonenumber, gender ) {\r\n//     return { name, phonenumber, gender };\r\n// }\r\n\r\n//const rows = [\r\n    // createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    // createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    // createData('Eclair', 262, 16.0, 24, 6.0),\r\n    // createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    // createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//];\r\n\r\nexport default function SimpleTable(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"right\">Customer Id</TableCell>\r\n                        <TableCell align=\"right\">Name</TableCell>\r\n                        <TableCell align=\"right\">Gender</TableCell>\r\n                        <TableCell align=\"right\">Phone Number</TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.data.map((item,index) => (\r\n                        <TableRow key={index}>\r\n                            <TableCell align=\"right\">{item.customerID}</TableCell>\r\n                            <TableCell align=\"right\">{item.customerName}</TableCell>\r\n                            <TableCell align=\"right\">{item.gender}</TableCell>\r\n                            <TableCell align=\"right\">{item.customerPhoneNumber}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n// export  SimpleTable;","import React from \"react\";\r\nimport {Button} from '@material-ui/core';\r\nimport {Select} from '@material-ui/core';\r\nimport {TextField} from '@material-ui/core';\r\nimport {Input} from '@material-ui/core';\r\nimport {MenuItem} from '@material-ui/core';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport \"./style.css\";\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nimport SimpleTable from \"./Table\";\r\n\r\nclass EnquiryForm extends React.Component {\r\n    state = {\r\n        customerName: '',\r\n        customerPhoneNumber: '',\r\n        gender: \"Male\",\r\n        text: \"\",\r\n        isLoading: false,\r\n        data: [],\r\n    };\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     // this.handelNameChange = this.handelNameChange.bind(this);\r\n    // }\r\n    //\r\n    //\r\n    // handelNameChange(event) {\r\n    //     this.setState({\r\n    //         customerName: event.target.value\r\n    //\r\n    //     });\r\n    // }\r\n    // handlePhoneNumberChange  = (event) => {\r\n    //     console.log(this.state.customerPhoneNumber);\r\n    //     this.setState({\r\n    //         customerPhoneNumber: event.target.value\r\n    //     })\r\n    // }\r\n    //\r\n    // handleGenderChange = (event) =>{\r\n    //     this.setState({\r\n    //         gender : event.target.value\r\n    //     })\r\n    // }\r\n\r\n    handleInputChange = (event) => {\r\n        let updatedObject = {};\r\n        let key = event.target.name;\r\n        updatedObject[key] = event.target.value;\r\n        this.setState(updatedObject);\r\n\r\n        //console.log(updatedObject);\r\n\r\n        // this.setState(\r\n        //     [event.target.name] = event.target.value;\r\n        // )\r\n    }\r\n\r\n\r\n    handleButtonCLick = async () => {\r\n\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n\r\n        })\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({title: this.state})\r\n        };\r\n        const response = await fetch('https://cors-anywhere.herokuapp.com/https://us-central1-form-manager-7234f.cloudfunctions.net/saveCustomer', requestOptions);\r\n        const data = await response.json();\r\n        console.log(`printing response : ${data}`);\r\n        console.log(data);\r\n        this.setState({\r\n            isLoading: false,\r\n            customerID: data[\"customerID\"],\r\n        })\r\n\r\n        let tempList = {\r\n            \"customerName\": this.state.customerName,\r\n            \"gender\": this.state.gender,\r\n            \"customerPhoneNumber\": this.state.customerPhoneNumber,\r\n            \"customerID\": this.state.customerID\r\n        };\r\n        let dataCopy = this.state.data;\r\n        if (localStorage.getItem('userData') === null) {\r\n            dataCopy = this.state.data;\r\n        } else {\r\n            dataCopy = JSON.parse(localStorage.getItem('userData'))\r\n        }\r\n\r\n        dataCopy.push(tempList);\r\n        localStorage.setItem('userData', JSON.stringify(dataCopy));\r\n        this.setState({\r\n            data: dataCopy\r\n        });\r\n\r\n    }\r\n\r\n    loadingText() {\r\n        return this.state.isLoading ? this.state.text = \"loading\" : \"\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Paper>\r\n                    <form>\r\n                        <p>Name</p>\r\n                        <div className=\"inp\">\r\n\r\n                            <Input label=\"Customer Name\" type=\"text\" name=\"customerName\"\r\n                                   value={this.state.customerName} onChange={this.handleInputChange}/>\r\n                        </div>\r\n                        <p>Gender</p>\r\n                        <div className=\"inp\">\r\n\r\n                            <Select name=\"gender\" value={this.state.gender} onChange={this.handleInputChange}>\r\n                                <MenuItem value=\"Male\">Male</MenuItem>\r\n                                <MenuItem value=\"Female\">Female</MenuItem>\r\n\r\n                            </Select>\r\n                        </div>\r\n                        <p>Phone Number</p>\r\n                        <div className=\"inp\">\r\n\r\n                            <Input label=\"Phone Number\" type=\"number\" name=\"customerPhoneNumber\" color=\"primary\"\r\n                                   value={this.state.customerPhoneNumber}\r\n                                   onChange={this.handleInputChange}/>\r\n                        </div>\r\n                    </form>\r\n                    <div className=\"inp\">\r\n                    <Button variant=\"contained\" color=\"primary\" className=\"but\" onClick={this.handleButtonCLick}>Save Info</Button>\r\n                    </div>\r\n                    {this.state.isLoading ?\r\n                        <div className=\"inp\">\r\n                            <CircularProgress color=\"secondary\"/>\r\n                        </div> : null\r\n                    }\r\n                </Paper>\r\n\r\n                <div className=\"form\">\r\n                    <SimpleTable data={this.state.data}/>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnquiryForm;","import React from 'react';\nimport './App.css';\nimport EnquiryForm from \"./Components/EnquiryForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <EnquiryForm/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}